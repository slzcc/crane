## Helm
## ********************************************************************************************************************************

# 部署 Helm
is_deploy_helm: false

## Ingress Nginx
## ********************************************************************************************************************************

# 部署 Ingress Nginx
is_deploy_ingress_nginx: false

# Ingress Nginx Version
ingress_nginx_version: "v1.1.1"

# 部署 Ingress Nginx Example
is_deploy_ingress_nginx_example: false

# Ingress Nginx Example Domain
# Ingres 示例使用的域名, 如果没有自定义域名, 可配置本机 Hosts
ingress_nginx_example: "www.example.com"

# Metircs Server
## ********************************************************************************************************************************

# Metircs Server Enable
is_deploy_metrics_server: false

# Metircs Server Deploy Version
# https://github.com/kubernetes-sigs/metrics-server/releases
metrics_server_version: "v0.6.1"

## DNS Example
## ********************************************************************************************************************************

# 部署 DNS Example Tools
# 用来测试集群内是否 DNS 可用的 Tools Pods
is_deploy_busybox_example: false

## Istio
## ********************************************************************************************************************************

# 部署 Istio
# 注意 部署 Istio 不建议与 Prometheus Operator 一同部署, 可能会引发服务之间的冲突问题, 如需一同部署请自行解决依赖
is_deploy_istio: false

# Istio Home Path
istio_home: "/usr/local/istio-{{ istio_version }}"

# Istio Version
# https://github.com/istio/istio/releases
istio_version: 1.15.3

# 部署 Istio 所使用的 Ingress Domain
istio_ingress_prometheus_domain: "prometheus.example.com"
istio_ingress_grafana_domain: "grafana.example.com"
istio_ingress_tracing_domain: "tracing.example.com"
istio_ingress_kiali_domain: "kiali.example.com"

# istio kiali user/pass base64 coding, default admin
istio_kiali_username: "YWRtaW4="
istio_kiali_password: "YWRtaW4="

## Upload service
## ********************************************************************************************************************************

# 部署 Upload service
# 如果部署 Harbor 则此服务默认开启，因为需要提供 TLS 证书的下载，如果机器网络等因素不稳定则会跳过。
is_deploy_upload_service: false

# Upload deploy namespace
upload_deploy_namespace: "default"

# Upload Ingress Domain
upload_service_ingress_domain: "upload.example.com"

# Upload Deploy Version
upload_version: "v4"

## Harbor
## ********************************************************************************************************************************

# Harbor Deploy Enable
is_deploy_harbor: false

# Harbor Version
## https://github.com/goharbor/harbor/releases
harbor_version: "v2.6.2"

# Harbor Pod Prefix Name
harbor_project_name_prefix: "release-name-"

# Harbor Deploy Namespace
harbor_namespace: "harbor-system"

# Harbor Admin Password
harbor_admin_password: "Harbor12345"

# Harbor PostGreSQL Secret 
harbor_pg_secret_admin_password: "changeit"

# Harbor Core Secure Key
harbor_core_secret_secret_key: "not-a-secure-key" 
harbor_core_secret_secret: "pxfN8RPG54GfaP2Y"
harbor_core_secret_csrf_key: "L930JXpTmcRXkt40qkL8JE1x9p3f5A7M"

# Harbor Registry Secret
## harbor_registry_user:harbor_registry_password
harbor_registry_secret_htpasswd: "{{ harbor_jobservice_secret_registry_credential_username }}:$2y$10$9L4Tc0DJbFFMB6RdSCunrOpTHdwhid4ktBJmLD00bYgqkkGOvll3mYou"
harbor_registry_secret_http_secret: "74Q3oNeReD3XiQ08"
harbor_registry_secret_redis_password: ""

# Harbor JobService Secret
harbor_jobservice_secret_secure: "Lujf8J1BFRhWMiW3"
harbor_jobservice_secret_registry_credential_username: "harbor_registry_user"
harbor_jobservice_secret_registry_credential_password: "harbor_registry_password"

# Harbor chartmuseum Secret
harbor_chartmuseum_secret_redis_password: ""

# Harbor truvt Secret
harbor_trivy_secret_redisURL: "redis://{{ harbor_project_name_prefix }}harbor-redis:6379/5?idle_timeout_seconds=30"
harbor_trivy_secret_gitHubToken: ""

# Harbor clair Secret
harbor_clair_secret_postgres: "postgres://postgres:{{ harbor_pg_secret_admin_password }}@{{ harbor_project_name_prefix }}harbor-database:5432/postgres?sslmode=disable"

# Harbor notary Secret
harbor_notary_server_secret_postgres: "postgres://postgres:{{ harbor_pg_secret_admin_password }}@{{ harbor_project_name_prefix }}harbor-database:5432/notaryserver?sslmode=disable"
harbor_notary_signer_secret_postgres: "postgres://postgres:{{ harbor_pg_secret_admin_password }}@{{ harbor_project_name_prefix }}harbor-database:5432/notarysigner?sslmode=disable"

# Harbor Domain
## 此值切记一定要使用最常用的域名进行绑定, Harbor 会在数据库中记录此值, 所以后续需要修改时则可能遇到不必要的问题,
## 可以通过下方的 `harbor_tls_option_domain` 定义外网或其他域名地址进行绑定
harbor_ingress_default_domain: "harbor.example.com"
harbor_ingress_notary_domain: "notary.example.com"

# 此配置主要为了申请 TLS 使用
# 增加证书中 DNS 项, 目的是此证书可能被其他域名公用，比如有双机房多机房对等服务
# 在 DNS 切换服务时多机房可通过一个域名即可实现切换而不用替换证书
# example: "domain1,domain2,..."
harbor_tls_option_domain: "{{ harbor_ingress_default_domain }},{{ harbor_ingress_notary_domain }}"

# 是否轮转 Harbor 证书
# 如果为 true 则不会部署 harbor, 会在原有的 harbor 更新 ca 证书
is_harbor_ca_rotation: false

# CFSSL 生成证书的加密方式
tls_harbor_server_encryption_algorithm: "rsa"
tls_harbor_client_encryption_algorithm: "rsa"

# CFSSL 生成证书的通过加密算法生成的长度
tls_harbor_server_encryption_algorithm_size: 2048
tls_harbor_client_encryption_algorithm_size: 2048

# 证书有效期, 默认为 5 年, CA 根证书与 server 证书使用一个时间
tls_harbor_server_validity_period: 20
tls_harbor_client_validity_period: 20

# 证书信息头, 国家信息 
# Country Name
tls_harbor_server_head_info_C: "CN"
tls_harbor_client_head_info_C: "CN"

# 证书信息头, 地区或城市 
# Locality Name
tls_harbor_server_head_info_L: "BeiJing"
tls_harbor_client_head_info_L: "BeiJing"

# 证书信息头, 组织 
# Organization Name 
tls_harbor_server_head_info_O: "Harbor"
tls_harbor_client_head_info_O: "Harbor"

# 证书信息头, 组织单位 
# Organizational Units Name
tls_harbor_server_head_info_OU: "Harbor"
tls_harbor_client_head_info_OU: "Harbor"

# 证书信息头, 州或省 
# State or Province Name
tls_harbor_server_head_info_ST: "BeiJing"
tls_harbor_client_head_info_ST: "BeiJing"

# 把 Clent 证书 Copy 到所有的集群节点中
is_harbor_client_cert_copy_to_nodes: true

# Docs https://wiki.shileizcc.com/confluence/display/KUB/Kubernetes+Harbor

# Harbor TLS 时间换算
tls_harbor_validity_period_hours: "{{ tls_harbor_server_validity_period * 365 * 24 }}"


# OpenLDAP
## ********************************************************************************************************************************

# OpenLDAP Deploy Enable
is_deploy_openldap: false

# OpenLDAP deploy namespace
openldap_deploy_namespace: "default"

# OpenLDAP admin 的密码
openldap_admin_password: "ldap.password"

# OpenLDAP config 的密码
openldap_config_password: "iFWAS81qjF9r3f+wEpJL/Hjq9qkLmomK9qFDWp2Dnek"

# OpenLDAP 识别 Domain 初始化数据, 必要时请设置 DNS
openldap_domain: "ldap.example.com"

# OpenLDAP Ingress Domain
openldap_ingress_domain: "{{ openldap_domain }}"

# OpenLDAP Deploy Version
openldap_version: "0.1.4"

# Webmin
## ********************************************************************************************************************************

# Webmin Deploy Enable
is_deploy_webmin: false

# Webmin deploy namespace
webmin_deploy_namespace: "default"

# Webmin Root 密码
webmin_root_password: "webmin.password"

# Webmin Ingress Domain
webmin_ingress_domain: "webmin.example.com"

# Webmin Deploy Version
webmin_version: "1.960"

# Gitlab
## ********************************************************************************************************************************

# Gitlab Deploy Enable
is_deploy_gitlab: false

# Gitlab deploy namespace
gitlab_deploy_namespace: "default"

# Gitlab Ingress Domain
gitlab_ingress_domain: "gitlab.example.com"

# Gitlab Deploy Version
gitlab_version: "14.6.5-ce.0"

# Nexus
## ********************************************************************************************************************************

# Nexus Deploy Enable
is_deploy_nexus: false

# Nexus deploy namespace
nexus_deploy_namespace: "default"

# Nexus Ingress Domain
nexus_ingress_domain: "nexus.example.com"

# Mexus Deploy Version
nexus_version: "3.37.3"

# Jenkins
## ********************************************************************************************************************************

# Jenkins Deploy Enable
is_deploy_jenkins: false

# Gitlab deploy namespace
jenkins_deploy_namespace: "default"

# Jenkins Deploy Version
jenkins_version: "2.317"

# Jenkins Ingress Domain
jenkins_ingress_domain: "jenkins.example.com"


# Deploy Cluster Host List
## ********************************************************************************************************************************
k8s_master_ip_list: >-
  [{% for host in groups['kube-master'] -%}
    '{{ host }}'
    {%- if not loop.last -%},{%- endif -%}
  {%- endfor -%}]

k8s_master_name_list: >-
  [{% for host in groups['kube-master'] -%}
    '{{ hostvars[host].ansible_nodename }}'
    {%- if not loop.last -%},{%- endif -%}
  {%- endfor -%}]

k8s_master_ip_str: >-
  {% for host in groups['kube-master'] -%}
    {{ host }}
    {%- if not loop.last -%},{%- endif -%}
  {%- endfor -%}

all_hostname_str: >-
  {% for host in groups['kube-master'] -%}
    {{ hostvars[host]['ansible_nodename'] }}
    {%- if not loop.last -%},{%- endif -%}
  {%- endfor -%}

k8s_all_ip_list: >-
  [{% for host in groups['k8s-cluster'] -%}
    '{{ host }}'
    {%- if not loop.last -%},{%- endif -%}
  {%- endfor -%}]

hadoop_dfs_edits_dir_str: >-
  [{% for host in hadoop_all_hostname -%}
    '{{ host }}:8485'
    {%- if not loop.last -%};{%- endif -%}
  {%- endfor -%}]


#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
#
#
#                               Abandoned Service
#
#
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

# # NextCloud
# ## ********************************************************************************************************************************

# # NextCloud Deploy Enable
# is_deploy_nextcloud: false

# # NextCloud MySQL Root 密码
# nextcloud_mysql_root_password: "nextcloud"

# # NextCloud Host
# nextcloud_mysql_host: "mysql-0.default.svc"

# # NextCloud DB User and Pass
# nextcloud_mysql_user: "nextcloud"
# nextcloud_mysql_pass: "nextcloud"

# # NextCloud DB Database
# nextcloud_mysql_database: "nextcloud"

# # NextCloud Ingress Domain
# nextcloud_ingress_domain: "nextcloud.example.com"

# # NextCloud Admin Username
# nextcloud_admin_user: "admin"

# # NextCloud Admin Password
# nextcloud_admin_pass: "nextcloud"


# # Zookeeper
# ## ********************************************************************************************************************************

# # Zookeeper Deploy Enable
# is_deploy_zookeeper: false

# # Zookeeper Deploy Size
# zookeeper_deploy_replicas: 3


# # Kafka
# ## ********************************************************************************************************************************

# # Kafka Deploy Enable
# is_deploy_kafka: false

# # Kafka Deploy Version
# kafka_version: "2.2.0"

# # Kafka Manage Ingress Domain
# kafka_manage_ingress_domain: "km.example.com"

# # Kafka Deploy Size
# kafka_deploy_replicas: 3


# # Hadoop
# ## ********************************************************************************************************************************

# # Hadoop Deploy Enable
# is_deploy_hadoop: false

# # Hadoop Deploy Size
# hadoop_deploy_replicas: 3

# # 部署 Hadoop 方式比较简单, 默认是通过 hostNetwork 方式进行部署
# # 并且需要实现开启内部 SSH 方式进行互相识别才可以启动, 请按照下方的配置进行修改
# ## 所有节点的 hostname 并且可通过 hostname 可以 ping 通.
# hadoop_all_hostname: "BJ-M5-K8S-21-87 BJ-M5-K8S-21-88 BJ-M5-K8S-21-89"

# ## 容器内部开启的端口，如果不冲突请忽略
# hadoop_local_ssh: "23312"

# ## hdfs set zookeeper addr
# ## 按照上述配置进行部署是, 则应配置如下
# hadoop_set_config_zookeeper: "zk-0.zk-hs.cdh.svc.cluster.local:2181,zk-1.zk-hs.cdh.svc.cluster.local:2181,zk-2.zk-hs.cdh.svc.cluster.local:2181"

# ## 选择前两个节点部署 namespace
# hadoop_set_config_namespace_host01: "{{' '.join(hadoop_all_hostname.split()[0:1])}}"
# hadoop_set_config_namespace_host02: "{{' '.join(hadoop_all_hostname.split()[1:2])}}"


# # Hbase
# ## ********************************************************************************************************************************

# # Hbase Deploy Enable
# is_deploy_hbase: false

# # Hbase Deploy Size
# hbase_deploy_replicas: 3

# # 部署 hbase 方式比较简单, 默认是通过 hostNetwork 方式进行部署
# # 并且需要实现开启内部 SSH 方式进行互相识别才可以启动, 请按照下方的配置进行修改
# ## 所有节点的 hostname 并且可通过 hostname 可以 ping 通.
# hbase_all_hostname: "BJ-M5-K8S-21-87 BJ-M5-K8S-21-88 BJ-M5-K8S-21-89"

# ## 容器内部开启的端口，如果不冲突请忽略
# ## 不要与 hadoop 重复
# hbase_local_ssh: "23313"

# ## hbase 数据目录路径
# hbase_hdfs_dir: "/data/hbase"

# ## hbase set zookeeper addr
# ## 按照上述配置进行部署是, 则应配置如下
# hbase_set_config_zookeeper: "zk-0.zk-hs.cdh.svc.cluster.local:2181,zk-1.zk-hs.cdh.svc.cluster.local:2181,zk-2.zk-hs.cdh.svc.cluster.local:2181"

