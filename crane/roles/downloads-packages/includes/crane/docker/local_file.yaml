---
# Kubernetes
## ********************************************************************************************************************************
# Check kubernetes image
- name: Check kubernetes image
  shell: 'for i in {{ k8s_cluster_component_registry }}/kube-proxy:{{ k8s_version }} {{ k8s_cluster_component_registry }}/kube-apiserver-amd64:{{ k8s_version }} {{ k8s_cluster_component_registry }}/kube-controller-manager:{{ k8s_version }} {{ k8s_cluster_component_registry }}/kube-scheduler:{{ k8s_version }} haproxy calico/node:{{ calico_version }} calico/cni:{{ calico_version }} calico/kube-controllers:{{ calico_version }} coredns/coredns:{{ dns_version }} {{ k8s_cluster_component_registry }}/etcd:{{ etcd_version }} {{ k8s_cluster_component_registry }}/pause:{{ pause_version }} slzcc/keepalived; do if [ ! `{{ kubernetes_ctl_path }}docker images --filter=reference="$i*" -aq | wc -l` -ge 1 ] ;then echo 1 > /dev/stderr && exit 1 ; fi ; done'
  register: check_k8s_image
  ignore_errors: true

- name: Copy Kubernetes Image
  copy:
    src: roles/downloads-packages/files/kubernetes.tar.gz
    dest: "{{ temporary_dirs }}kubernetes.tar.gz"
    owner: "{{ ssh_connect_user }}"
    mode: 0755
  when: check_k8s_image is failed

- name: Import Kubernetes Docker Image  
  shell: "{{ kubernetes_ctl_path }}docker load -i {{ temporary_dirs }}kubernetes.tar.gz"
  when: check_k8s_image is failed

- name: Image Deploy
  include: "roles/downloads-packages/includes/crane/docker/image_deploy.yaml"
  when: check_k8s_image is failed