---
## Generate Kubelet Kubeconfig
- name: Create Kubectl Config *
  shell: "cd {{ kubernetes_pki_dirs }} && 
          {{ kubernetes_ctl_path }}kubectl config set-cluster kubernetes 
            --certificate-authority=ca.pem 
            --embed-certs=true 
            --server={{ k8s_apiserver_https_bind }} 
            --kubeconfig={{ kubernetes_etc_dirs }}kubelet.conf"

- name: Create Kubectl Config **
  shell: "cd {{ kubernetes_pki_dirs }} && 
          {{ kubernetes_ctl_path }}kubectl config set-cluster kubernetes 
            --certificate-authority=ca.pem 
            --embed-certs=true 
            --server={{ k8s_apiserver_https_bind }} 
            --kubeconfig={{ kubernetes_etc_dirs }}kubelet.conf"

- name: Create Kubectl Config ***
  shell: "cd {{ kubernetes_pki_dirs }} && 
          {{ kubernetes_ctl_path }}kubectl config set-credentials system:node:{{ hostvars[inventory_hostname].ansible_nodename }} 
            --client-certificate=kubelet-{{ hostvars[inventory_hostname].ansible_nodename }}.pem 
            --client-key=kubelet-{{ hostvars[inventory_hostname].ansible_nodename }}-key.pem 
            --embed-certs=true 
            --kubeconfig={{ kubernetes_etc_dirs }}kubelet.conf"

- name: Create Kubectl Config ****
  shell: "cd {{ kubernetes_pki_dirs }} && 
          {{ kubernetes_ctl_path }}kubectl config set-context system:node:{{ hostvars[inventory_hostname].ansible_nodename }}@kubernetes 
            --cluster=kubernetes 
            --user=system:node:{{ hostvars[inventory_hostname].ansible_nodename }} 
            --kubeconfig={{ kubernetes_etc_dirs }}kubelet.conf"
            
- name: Create Kubectl Config *****
  shell: "cd {{ kubernetes_pki_dirs }} && 
          {{ kubernetes_ctl_path }}kubectl config use-context system:node:{{ hostvars[inventory_hostname].ansible_nodename }}@kubernetes 
            --kubeconfig={{ kubernetes_etc_dirs }}kubelet.conf"

- name: Create Kubectl Config ******
  shell: "chown {{ ssh_connect_user }} {{ kubernetes_etc_dirs }}kubelet.conf"

- name: Clean Files *
  shell: 'rm -rf {{ kubernetes_pki_dirs }}*.json \
                 {{ kubernetes_pki_dirs }}*.csr'
  ignore_errors: true
